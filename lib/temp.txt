#include "Network.h"
#include "addons/TokenHelper.h"
#include <SPI.h>
#include <MFRC522.h>


// WiFi
const char* WIFI_SSID = "Robotics and Automation Society";
const char* WIFI_PASSWORD = "IEEE-RAS/LAB";

// RFID
const uint8_t RST_PIN = D2;
const uint8_t SS_PIN = D4;
MFRC522 mfrc522(SS_PIN, RST_PIN);

#define API_KEY "AIzaSyDDptLzu8BVCRNB2Gg6ZI_eclNrscaZWsY"
#define FIREBASE_PROJECT_ID "riot-4n4n1f"
#define USER_EMAIL "anocan91@gmail.com"
#define USER_PASSWORD "Anocan3*"

static Network *instance = NULL;

Network::Network(){
  instance = this;
}

void WiFiEventConnected(WiFiEvent_t event){
  Serial.println("WIFI CONNECTED! BUT WAIT FOR THE LOCAL IP ADDR");
}

void WiFiEventGotIP(WiFiEvent_t event){
  Serial.print("LOCAL IP ADDRESS: ");
  Serial.println(WiFi.localIP());
  instance->firebaseInit();
}

void WiFiEventDisconnected(WiFiEvent_t event){
  Serial.println("WIFI DISCONNECTED!");
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
}

/*
void FirestoreTokenStatusCallback(TokenInfo info){
  Serial.printf("Token Info: type = %s, status = %s\n", getTokenType(info).c_str(), getTokenStatus(info).c_str());
}*/

void Network::initWiFi(){
  WiFi.disconnect();
  WiFi.onEvent(WiFiEventConnected, WIFI_EVENT_STAMODE_CONNECTED);
  WiFi.onEvent(WiFiEventGotIP, WIFI_EVENT_STAMODE_GOT_IP);
  WiFi.onEvent(WiFiEventDisconnected, WIFI_EVENT_STAMODE_DISCONNECTED);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
}

void Network::firebaseInit(){
  config.api_key = API_KEY;

  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;

  //config.token_status_callback = FirestoreTokenStatusCallback;

  Firebase.begin(&config, &auth);
}
void firestoreDataUpdate(double temp, double humi);

void setup(){
    Serial.begin(9600);
    delay(1000);

    SPI.begin();
    mfrc522.PCD_Init();
    Serial.println("RFID reading UID");
    
}

void loop(){
      if (mfrc522.PICC_IsNewCardPresent()) {
    if (mfrc522.PICC_ReadCardSerial()) {
      Serial.print("Tag UID: ");
      for (byte i=0; i<mfrc522.uid.size; i++) {
        Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
        Serial.print(mfrc522.uid.uidByte[i], HEX);

      }
      Serial.println();
      mfrc522.PICC_HaltA();

      //
      firestoreDataUpdate(12,32);
    }
  }
}

void Network::firestoreDataUpdate(double temp, double humi) {
    if (WiFi.status() == WL_CONNECTED && Firebase.ready()) {
        String documentPath = "House/Room_1";

        FirebaseJson content;

        content.set("fields/temperature/doubleValue", String(temp).c_str());
        content.set("fields/humidity/doubleValue", String(humi).c_str());

           if(Firebase.Firestore.patchDocument(&fbdo, FIREBASE_PROJECT_ID, "", documentPath.c_str(), content.raw(), "temperature,humidity")){
      Serial.printf("ok\n%s\n\n", fbdo.payload().c_str());
      return;
    }else{
      Serial.println(fbdo.errorReason());
    }

        if(Firebase.Firestore.createDocument(&fbdo, FIREBASE_PROJECT_ID, "", documentPath.c_str(), content.raw())) {
            Serial.printf("OK\n%s\n\n", fbdo.payload().c_str());
            return;
        } else {
            Serial.println(fbdo.errorReason());
        }
    }
}